
Specification
I need a program either in Python or C#, with the following:

Implement a custom data structure:
Linked list which contain segments of the picture
- Segment's starting x and y coords
- Segment height and width
- Boolean if its an indvidual character or not
- 64x64 binary picture of the character (initially empty)
- 64 int array (result of the Hadamard transform)
- Final character code

Workflow of the program:
- Open an image file (color) which contain text (could use OpenCV). [DONE]
- Convert to grayscale (could use OpenCV, but better a custom implementation). [DONE]
- Treshold the grayscale to get a binary picture (should be own implementation, not OCV). [DONE]
- Segment vertically, finding not empty rows and building the linked list (aka. finding the bounding box of 
text rows)[DONE]
- Running through the list, segmenting horizontally, seeking empty pixel columns, so finding the bounding box 
of individual chars, inserting them into, "replacing" the row segment.[DONE]
- Cuting out empy rows or columns from the characters bounding box.[DONE]
- Transforming each character's picture (the bounding box part of the original picture) to a 64x64 binary image, 
and storing this in the linked list element[DONE]
- Applying Hadamard-Walsh tranformation to each 64x64 picture, storing the result of the transform into the 
array[DONE] 

The program should finally compare H-W transform value to a pre-built "database" of various characters with 
various fonts (the English ABC with maybe Ariel, Times New Roman, and something else)[WAITING FOR FEEDBACK][but this is optional]

I can't pay much, as I'm a student, this is an assigment and have to pay tuition and help family too 'cause
 of the pandemia.

----------------------------------------------------------
 the whole algorithm is like:

for i=1 to 64: //for each Walsh kernel/picture
inner_product=0
for x=1 to 64: //x is the char segment picture and Walsh x coord
for y=1 to 64: // y coord
inner_product=inner_product+character_image(x,y)*walsh_images[i](x,y)
feature_vector(i)=inner_product

----------------------------------------------------------

also the teacher want a list, not sure if Python's is a true linked list.

So in the begining there will be an empty list, then after vertical segmentation 
a few element, with bounding box of rows
then on the horizontal segmentation each those element will be "replaced" by a list of element
 of each character's box

 ----------------------------------------------------------

 
tomdenem01
Apr 10, 1:06 PM
ReportSpam
while after vertical segmentation elements just contain the rows, the "character" bool flag will be false,
but after the horizontal, where now you "cut" each letter/character, would be set, so indicating, that no 
futher cutting/segmentation need


then running through that list (where elements now contain each character's b.box starting coords, height
 and width, and the char bool flag set, but empty char_name and 64x64 image fields)
for each element of the list the original image's part enclosed by the bounding box of the

T
tomdenem01
Apr 10, 1:07 PM
ReportSpam
for each element of the list the original image's part enclosed by the bounding box of that element, will 
be resized to a 64x64 binary image and stored into the element

T
tomdenem01
Apr 10, 1:08 PM
ReportSpam
then if each element's 64x64 image saved, would be running the Walsh algorithm wrote above

T
tomdenem01
Apr 10, 1:12 PM
ReportSpam
I will make an example document, actually each letter of the English ABC, in some monospace font, 
then exported as a picture, and thats each letter's Walsh feature_vector would be saved as the "database", 
think a dictionary for each character and those numbers of W-transform

think the teacher want multiple font "database" and some real scanned or mobile photographed paper 
document for the best credit, but I just want to accomplish that subject :D []


T
Thank your progress!
As I understand the task, based on teacher's explanation, when you have the 64x64 picture of the cutted out characters, 
then applying (pixel-wise binary multiplying) the 64 version of the Walsh transform matrix/picture, then summing those, 
you get a 64-length integer vector/array, which will contain some kind of fingerprint of each character

T
tomdenem01
Apr 21, 1:49 AM
ReportSpam
if you apply it to a training image, which contain each character of a font typeface what you want to train, 
in straight rows and columns, you can get those feature vectors/fingerprint for each char, then you can store 
them in some kind of a dictionary.

Then if you get a real scanned picture, which is a bit messy, with not so straigh lines, and applying this 
algorithm, after you get the final list of small pictures and the Walsh feature vectors of those pictures,
 you can compare them to the previously built "dictionary", so you get a guess of what that picture's character should be, 
 then iterating through the custom datatype list you can build a text file what the real picture's text was.

Hope now its somewhat clear.

